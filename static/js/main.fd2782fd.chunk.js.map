{"version":3,"sources":["components/dashboard/Square.js","components/dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Square","state","true","toggleBinary","e","setState","props","onChange","className","id","this","index","style","onClick","Component","Dashboard","binary","changeBinary","binaryValue","Number","target","copyText","text","document","getElementById","select","setSelectionRange","execCommand","console","log","i","push","squares","key","type","value","join","class","title","map","val","App","Boolean","window","location","hostname","match","ReactDOM","render"],"mappings":"8PA6BgBA,G,iNA1BZC,MAAQ,CACJC,MAAM,G,EAGVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVH,MAAO,EAAKD,MAAMC,OAEtB,EAAKI,MAAMC,SAASH,GAAI,EAAKH,MAAMC,O,wEAInC,OACI,yBAAKM,UAAU,SAASC,GAAIC,KAAKJ,MAAMK,MAAOC,MAAO,CACjD,gBAAmBF,KAAKT,MAAMC,KAAO,QAAU,SAGhDW,QAASH,KAAKP,mB,GAlBRW,cCwELC,E,2MArEZd,MAAQ,CACJe,OAAQ,I,EAGZC,aAAe,SAACb,EAAGc,GACf,IAAIF,EAAS,EAAKf,MAAMe,OAExBA,EADkBG,OAAOf,EAAEgB,OAAOX,KACZS,EAAc,EAAI,EACxC,EAAKb,SAAS,CACVW,OAAQA,K,EAKhBK,SAAW,WACP,IAAIC,EAAOC,SAASC,eAAe,WAEnCF,EAAKG,SACLH,EAAKI,kBAAkB,EAAG,OAE1BH,SAASI,YAAY,QACrBC,QAAQC,IAAIP,I,mFAIZM,QAAQC,IAAI,SAEZ,IADA,IAAIb,EAAS,GACJc,EAAI,EAAGA,EAAI,IAAKA,IACrBd,EAAOe,KAAK,GAEhBrB,KAAKL,SAAS,CACVW,OAAQA,M,+BAMZ,IADA,IAAIgB,EAAU,GACNF,EAAI,EAAGA,EAAI,IAAKA,IACpBE,EAAQD,KAAK,kBAAC,EAAD,CACTE,IAAKH,EACLnB,MAAOmB,EACPvB,SAAUG,KAAKO,gBAGvB,OACI,yBAAKT,UAAU,aACX,yBAAKA,UAAU,WACVwB,GAGL,2BAAOE,KAAK,OAAOC,MAAOzB,KAAKT,MAAMe,OAAOoB,KAAK,IAAK3B,GAAG,UAAU4B,MAAM,UACzE,yBAAK7B,UAAU,UACX,uBAAG6B,MAAM,cAAcxB,QAASH,KAAKW,SAAUiB,MAAM,SACpD5B,KAAKT,MAAMe,OAAOuB,KAAI,SAACC,EAAK7B,GACzB,OACI,uBAAGsB,IAAKtB,EAAOC,MAAO,IAGlB4B,Y,GA3DR1B,aCYT2B,E,iLAVX,OACE,yBAAKjC,UAAU,OACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,Y,GALQM,a,MCQE4B,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVJC,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAASC,eAAe,W","file":"static/js/main.fd2782fd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Square extends Component {\n    state = {\n        true: false\n    }\n\n    toggleBinary = (e) => {\n        this.setState({\n            true: !this.state.true\n        })\n        this.props.onChange(e, !this.state.true);\n    }\n\n    render() {\n        return (\n            <div className=\"square\" id={this.props.index} style={{\n                'backgroundColor': this.state.true ? 'black' : 'white',\n                // 'width' : '50px',\n                // 'height' : '50px'\n            }} onClick={this.toggleBinary}>\n\n            </div>\n        )\n    }\n}\n\n\n\nexport default (Square);","import React, { Component } from \"react\";\nimport '../../css/main.css'\nimport Square from './Square'\n\nclass Dashboard extends Component {\n    state = {\n        binary: [],\n    }\n\n    changeBinary = (e, binaryValue) => {\n        let binary = this.state.binary;\n        let squareIndex = Number(e.target.id);\n        binary[squareIndex] = binaryValue ? 1 : 0;\n        this.setState({\n            binary: binary\n        })\n        // console.log(binary[index].props.binaryValue)\n    }\n\n    copyText = () => {\n        let text = document.getElementById(\"myInput\");\n\n        text.select();\n        text.setSelectionRange(0, 99999);\n\n        document.execCommand(\"copy\");\n        console.log(text);\n    }\n\n    componentDidMount() {\n        console.log('Hello');\n        let binary = []\n        for (let i = 0; i < 100; i++) {\n            binary.push(0);\n        }\n        this.setState({\n            binary: binary\n        })\n    }\n\n    render() {\n        let squares = [];\n        for(let i = 0; i < 100; i++) {\n            squares.push(<Square \n                key={i}\n                index={i}\n                onChange={this.changeBinary}\n            />);\n        }\n        return (\n            <div className=\"main_page\">\n                <div className=\"squares\">\n                    {squares}\n                </div>\n\n                <input type=\"text\" value={this.state.binary.join('')} id=\"myInput\" class=\"input\"/>\n                <div className=\"binary\">\n                    <i class=\"fas fa-copy\" onClick={this.copyText} title=\"copy\"></i>\n                    {this.state.binary.map((val, index) => {\n                        return (\n                            <p key={index} style={{\n                                // 'backgroundColor' : val === 0 ? '#fff' : '#222',\n                                // 'color': val === 0 ? '#222' : '#fff'\n                            }}>{val}</p>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nexport default (Dashboard);","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Dashboard from './components/dashboard/Dashboard'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"main_container\">\n          <Dashboard/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}